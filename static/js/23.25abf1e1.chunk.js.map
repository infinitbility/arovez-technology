{"version":3,"sources":["Pages/Dashboard/PostAJob.js","App/components/MainCard.js","App/components/UcFirst.js"],"names":["PostAJob","props","_this","Object","C_Users_User_Documents_arovez_technology_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_User_Documents_arovez_technology_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_User_Documents_arovez_technology_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleJobChange","e","jid","target","value","templateData","state","templates","find","setState","selectedTemplate","handlePostJob","error","errorMessage","apiUrl","config","baseurl","fetch","method","headers","Accept","Content-Type","then","response","json","data","reportButton","showJobPostReport","reportLoad","report","reports","loading","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_hoc_Aux__WEBPACK_IMPORTED_MODULE_14__","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","Header","Title","as","Body","md","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","Group","Control","key","id","className","onChange","map","template","index","title","Text","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","variant","Item","description","location","qualification","job_url","react_bootstrap__WEBPACK_IMPORTED_MODULE_11__","onClick","_App_components_UcFirst__WEBPACK_IMPORTED_MODULE_15__","text","_App_components_MainCard__WEBPACK_IMPORTED_MODULE_16__","loadingFunction","isOption","react_bootstrap__WEBPACK_IMPORTED_MODULE_12__","responsive","name","username","style","width","error_messages","status","React","Component","MainCard","fullCard","collapseCard","loadCard","cardRemove","loadFunction","cardReloadHandler","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","react__WEBPACK_IMPORTED_MODULE_6___default","alignRight","Toggle","Menu","prevState","href","DEMO","BLANK_LINK","concat","C_Users_User_Documents_arovez_technology_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","position","top","left","right","windowWidth","height","windowHeight","join","in","children","_hoc_Aux__WEBPACK_IMPORTED_MODULE_11__","windowSize","UcFirst","string","charAt","toUpperCase","slice"],"mappings":"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","file":"static/js/23.25abf1e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Form, ListGroup, Button, Table, Dropdown } from 'react-bootstrap';\r\nimport config from '../../config';\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport UcFirst from \"../../App/components/UcFirst\";\r\nimport MainCard from \"../../App/components/MainCard\";\r\n\r\nclass PostAJob extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { templates: [], selectedTemplate: {}, reports: [], loading: true, error: false, errorMessage: null, reportButton: false, report: false, reportLoad: false };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let apiUrl = config.baseurl + 'jobs';\r\n        fetch(apiUrl)\r\n            .then((response) => response.json())\r\n            .then((data) => this.setState({ templates: data, loading: false }));\r\n    }\r\n\r\n    handleJobChange = (e) => {\r\n\r\n        let jid = e.target.value;\r\n        if (jid !== 'null') {\r\n            let templateData = this.state.templates.find(e => e.jid == jid);\r\n            this.setState({ selectedTemplate: templateData })\r\n        } else {\r\n            this.setState({ selectedTemplate: {} })\r\n        }\r\n\r\n    };\r\n\r\n    handlePostJob = () => {\r\n        let selectedTemplate = this.state.selectedTemplate;\r\n        if (typeof selectedTemplate.jid == 'undefined') {\r\n            this.setState({ error: true, errorMessage: 'Please Select Job Template' });\r\n        } else {\r\n            this.setState({ error: false, errorMessage: null });\r\n\r\n            let apiUrl = config.baseurl + 'jobs/' + selectedTemplate.jid + '/job_post';\r\n\r\n            let requestOptions = {\r\n                method: 'POST',\r\n                headers: { \"Accept\": \"application/json\", \"Content-Type\": \"application/json\" },\r\n            };\r\n\r\n            fetch(apiUrl, requestOptions)\r\n                .then((response) => response.json())\r\n                .then((data) => this.setState({ reportButton: true }));\r\n\r\n        }\r\n    }\r\n\r\n    showJobPostReport = () => {\r\n\r\n        this.setState({reportLoad: true});\r\n\r\n        let selectedTemplate = this.state.selectedTemplate;\r\n\r\n        let apiUrl = config.baseurl + 'jobs/' + selectedTemplate.jid + '/job_status';\r\n\r\n        let requestOptions = {\r\n            method: 'GET',\r\n            headers: { \"Accept\": \"application/json\", \"Content-Type\": \"application/json\" },\r\n        };\r\n\r\n        fetch(apiUrl, requestOptions)\r\n            .then((response) => response.json())\r\n            .then((data) => this.setState({ report: true, reports: data, reportLoad: false }));\r\n    }\r\n\r\n    render() {\r\n        let templates = this.state.templates;\r\n        let selectedTemplate = this.state.selectedTemplate;\r\n        let reports = this.state.reports;\r\n\r\n        if (typeof selectedTemplate.jid == 'undefined') {\r\n            selectedTemplate = null;\r\n        }\r\n\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Job Template</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <h5>Job Post</h5>\r\n                                <hr />\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <Form.Group>\r\n                                            <Form.Control key={'jobTemplate'} id=\"jobTemplate\" as=\"select\" className=\"mb-3\" onChange={this.handleJobChange}>\r\n                                                <option key={'Select Job Template'} value={'null'}>{'Select Job Template'}</option>\r\n                                                {\r\n                                                    templates.map((template, index) => (\r\n                                                        <option key={index} value={template.jid}>{template.title}</option>\r\n                                                    ))\r\n                                                }\r\n                                            </Form.Control>\r\n                                            {\r\n                                                this.state.error ? (\r\n                                                    <Form.Text className=\"text-danger\">{this.state.errorMessage}</Form.Text>\r\n                                                ) : null\r\n                                            }\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        {\r\n                                            selectedTemplate !== null ? (\r\n                                                <ListGroup variant=\"flush\">\r\n                                                    <ListGroup.Item>{'Title: ' + selectedTemplate.title}</ListGroup.Item>\r\n                                                    <ListGroup.Item>{'Description: ' + selectedTemplate.description}</ListGroup.Item>\r\n                                                    <ListGroup.Item>{'Location: ' + selectedTemplate.location}</ListGroup.Item>\r\n                                                    <ListGroup.Item>{'Qualification: ' + selectedTemplate.qualification}</ListGroup.Item>\r\n                                                    <ListGroup.Item>{'Job URL: ' + selectedTemplate.job_url}</ListGroup.Item>\r\n                                                </ListGroup>\r\n                                            ) : null\r\n                                        }\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <Button onClick={this.handlePostJob} variant={'primary'}><UcFirst text={'Post A Job'} /></Button>\r\n                                        {\r\n                                            this.state.reportButton ? (\r\n                                                <Button onClick={this.showJobPostReport} variant={'info'}><UcFirst text={'Show Post Report'} /></Button>\r\n                                            ) : null\r\n                                        }\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                {\r\n                    this.state.report ? (\r\n                        <Row>\r\n                            <Col>\r\n                                <MainCard title='Job Post Report' loading={this.state.reportLoad} loadingFunction={this.showJobPostReport} isOption>\r\n                                    <Table responsive>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Name</th>\r\n                                                <th>User Name</th>\r\n                                                <th>Message</th>\r\n                                                <th>Status</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n\r\n                                            {\r\n                                                reports.map((report, index) => (\r\n                                                    <tr>\r\n                                                        <td>{report.name}</td>\r\n                                                        <td>{report.username}</td>\r\n                                                        <td style={{ width: 200 }}>{report.error_messages}</td>\r\n                                                        <td>{report.status}</td>\r\n                                                    </tr>\r\n                                                ))\r\n                                            }\r\n\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </MainCard>\r\n                            </Col>\r\n                        </Row>\r\n                    ) : null\r\n                }\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostAJob;","import React, {Component} from 'react';\r\nimport {Dropdown, Card, Collapse} from 'react-bootstrap';\r\nimport windowSize from 'react-window-size';\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\nclass MainCard extends Component {\r\n    state = {\r\n        isOption: this.props.isOption,\r\n        fullCard: false,\r\n        collapseCard: false,\r\n        loadCard: this.props.loading,\r\n        cardRemove: false,\r\n        loadFunction: this.props.loadingFunction,\r\n    };\r\n\r\n    componentWillReceiveProps(props){\r\n        this.setState({loadCard: props.loading});\r\n    }\r\n\r\n    cardReloadHandler = () => {\r\n        this.setState({loadCard: true});\r\n        setInterval(() => {\r\n            this.setState({loadCard: false});\r\n        }, 3000);\r\n    };\r\n\r\n    cardRemoveHandler = () => {\r\n        this.setState({cardRemove: true});\r\n    };\r\n\r\n    render() {\r\n        let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n        let card = '';\r\n        let cardClass = [];\r\n\r\n        if (this.state.isOption) {\r\n            cardHeaderRight = (\r\n                <div className=\"card-header-right\">\r\n                    <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n                        <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n                            <i className=\"feather icon-more-horizontal\"/>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {fullCard: !prevState.fullCard}})}}>\r\n                                <i className={this.state.fullCard ? 'feather icon-minimize' : 'feather icon-maximize'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? 'Restore' : 'Maximize'} </a>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {collapseCard: !prevState.collapseCard}})}}>\r\n                                <i className={this.state.collapseCard ? 'feather icon-plus' : 'feather icon-minus'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? 'Expand' : 'Collapse'} </a>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.state.loadFunction}>\r\n                                <i className='feather icon-refresh-cw'/>\r\n                                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n                            </Dropdown.Item>\r\n                            {/* <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\r\n                                <i className='feather icon-trash'/>\r\n                                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n                            </Dropdown.Item> */}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        cardHeader = (\r\n            <Card.Header>\r\n                <Card.Title as='h5'>{this.props.title}</Card.Title>\r\n                {cardHeaderRight}\r\n            </Card.Header>\r\n        );\r\n\r\n        if (this.state.fullCard) {\r\n            cardClass = [...cardClass, 'full-card'];\r\n            fullScreenStyle = {position: 'fixed', top: 0, left: 0, right: 0, width: this.props.windowWidth, height: this.props.windowHeight};\r\n        }\r\n\r\n        if (this.state.loadCard) {\r\n            cardClass = [...cardClass, 'card-load'];\r\n            loader = (\r\n                <div className=\"card-loader\">\r\n                    <i className=\"pct-loader1 anim-rotate\"/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.cardRemove) {\r\n            cardClass = [...cardClass, 'd-none'];\r\n        }\r\n\r\n        if (this.props.cardClass) {\r\n            cardClass = [...cardClass, this.props.cardClass];\r\n        }\r\n\r\n        card = (\r\n            <Card className={cardClass.join(' ')} style={fullScreenStyle}>\r\n                {cardHeader}\r\n                <Collapse in={!this.state.collapseCard}>\r\n                    <div>\r\n                        <Card.Body>\r\n                            {this.props.children}\r\n                        </Card.Body>\r\n                    </div>\r\n                </Collapse>\r\n                {loader}\r\n            </Card>\r\n        );\r\n\r\n        return (\r\n            <Aux>\r\n                {card}\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default windowSize(MainCard);\r\n","import React from 'react';\r\n\r\nclass UcFirst extends React.Component {\r\n    render() {\r\n        const string = this.props.text;\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n}\r\n\r\nexport default UcFirst;"],"sourceRoot":""}